华云鹏 7-28 08:33:26
第一题：
[要求]
给定一个整数数组和一个整数 k，判断数组中是否存在两个不同的索引 i 和 j，使得 nums [i] = nums [j]，并且i 和 j的差的绝对值至多为k。

[接口]
bool ContainsNearbyDuplicate(vector<int>& nums, int k)

[示例]
Array = 1,2,3,1
Key = 3
Output = true

华云鹏 7-28 08:34:11
第二题：
[要求]
给定一个整数，返回它在 Excel 表中相对应的列名称，如果在Excel表中找不到该列，则返回""。
例如，
    1 -> A
    2 -> B
    3 -> C
    ...
    26 -> Z
    27 -> AA
    28 -> AB 
    ...

[接口]
string ExcelSheetColumnTitle(int n) 

[示例]
Input = 1
Output = "A"

华云鹏 7-28 08:34:51
第三题：
[要求]
编写一个程序判断给定的数是否为丑数。丑数就是只包含质因数 2, 3, 5 的正整数。
说明：
1. 1 是丑数。
2.输入不会超过 32 位有符号整数的范围: [−（2的31次方）,  2的31次方 − 1]。

[接口]
bool IsUgly(int num)

[示例]
Input = 6
Output = true

华云鹏 7-28 08:35:45
第四题：
[要求]
判断一个整数是否是回文数。回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数。

[提高]
进阶:你能不将整数转为字符串来解决这个问题吗？

[接口]
bool IsPalindrome(int x) 

[示例]
Input = 121
Output = true

华云鹏 7-28 08:36:50
第五题：
[要求]
给定一个二叉树，找出其最小深度。
最小深度是从根节点到最近叶子节点的最短路径上的节点数量。

[接口]
int MinDepth(TreeNode* root)

[示例]
    3
   / \
  9  20
    /  \
   15   7
（这个图在测试样例中不需要画，只要下面的输入输出即可）
Input = 3,9,20,null,null,15,7
Output = 2

华云鹏 7-28 08:37:34
第六题：
[要求]
给定一个整数数组，判断是否存在重复元素。如果任意一值在数组中出现至少两次，函数返回true 。如果数组中每个元素都不相同，则返回false 。

[接口]
Input = [1,2,3,1]
Output = true

[示例]
bool ContainsDuplicate(vector<int>& nums)

华云鹏 7-28 08:38:01
第7题：
[要求]
给定一个二叉树，找出其最大深度。
二叉树的深度为根节点到最远叶子节点的最长路径上的节点数。

[接口]
int MaxDepth(TreeNode* root) 

[示例]
    3
   / \
  9  20
    /  \
   15   7
Input = 3,9,20,null,null,15,7
Output = 3 
   

华云鹏 7-28 08:38:38
第8题：
[要求]
编写一个函数，输入是一个无符号整数，返回其二进制表达式中数字位数为‘1’的个数（也被称为汉明重量）。

[提高]
如果多次调用这个函数，你将如何优化你的算法

[接口]
int HammingWeight(unsigned int n)

[示例]
Input = 3
Ouput = 2

华云鹏 7-28 08:39:08
第9题：
[要求]
给你两个二进制字符串，返回它们的和（用二进制表示）。
输入为非空字符串且只包含数字 1 和 0。
提示：每个字符串仅由字符 '0' 或 '1' 组成。
         1 <= a.length, b.length <= 10^4
         字符串如果不是 "0" ，就都不含前导零。
                 
[接口]
string AddBinary(string a, string b)

[示例]
Input1 = "11"
Input2 = "1"
Output = "100"

华云鹏 7-28 08:39:31
第10题：
[要求]
给定一个二叉树，返回所有从根节点到叶子节点的路径。
struct TreeNode {
        int val;
        struct TreeNode *left;
        struct TreeNode *right;
};

[接口]
vector<string> BinaryTreePaths(TreeNode* root)

[示例]
   1
 /   \
2     3
 \
  5
Input = 1,2,3,null,5
Output = "1->2->5", "1->3"